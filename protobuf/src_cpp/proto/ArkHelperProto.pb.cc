// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/ArkHelperProto.proto

#include "proto/ArkHelperProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSPlayerLoginReq::CSPlayerLoginReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSPlayerLoginReqDefaultTypeInternal {
  constexpr CSPlayerLoginReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSPlayerLoginReqDefaultTypeInternal() {}
  union {
    CSPlayerLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSPlayerLoginReqDefaultTypeInternal _CSPlayerLoginReq_default_instance_;
constexpr CSPlayerLoginRes::CSPlayerLoginRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)
{}
struct CSPlayerLoginResDefaultTypeInternal {
  constexpr CSPlayerLoginResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSPlayerLoginResDefaultTypeInternal() {}
  union {
    CSPlayerLoginRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSPlayerLoginResDefaultTypeInternal _CSPlayerLoginRes_default_instance_;
constexpr CSUpdatePlayerDataReq::CSUpdatePlayerDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSUpdatePlayerDataReqDefaultTypeInternal {
  constexpr CSUpdatePlayerDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSUpdatePlayerDataReqDefaultTypeInternal() {}
  union {
    CSUpdatePlayerDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSUpdatePlayerDataReqDefaultTypeInternal _CSUpdatePlayerDataReq_default_instance_;
constexpr CSUpdatePlayerDataRes::CSUpdatePlayerDataRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vip_(0)
  , points_(0){}
struct CSUpdatePlayerDataResDefaultTypeInternal {
  constexpr CSUpdatePlayerDataResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSUpdatePlayerDataResDefaultTypeInternal() {}
  union {
    CSUpdatePlayerDataRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSUpdatePlayerDataResDefaultTypeInternal _CSUpdatePlayerDataRes_default_instance_;
constexpr CSGetShopDataReq::CSGetShopDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSGetShopDataReqDefaultTypeInternal {
  constexpr CSGetShopDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSGetShopDataReqDefaultTypeInternal() {}
  union {
    CSGetShopDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSGetShopDataReqDefaultTypeInternal _CSGetShopDataReq_default_instance_;
constexpr CSGetShopDataRes::CSGetShopDataRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shopdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSGetShopDataResDefaultTypeInternal {
  constexpr CSGetShopDataResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSGetShopDataResDefaultTypeInternal() {}
  union {
    CSGetShopDataRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSGetShopDataResDefaultTypeInternal _CSGetShopDataRes_default_instance_;
constexpr CSGetKitDataReq::CSGetKitDataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CSGetKitDataReqDefaultTypeInternal {
  constexpr CSGetKitDataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSGetKitDataReqDefaultTypeInternal() {}
  union {
    CSGetKitDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSGetKitDataReqDefaultTypeInternal _CSGetKitDataReq_default_instance_;
constexpr CSGetKitDataRes::CSGetKitDataRes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kitdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSGetKitDataResDefaultTypeInternal {
  constexpr CSGetKitDataResDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSGetKitDataResDefaultTypeInternal() {}
  union {
    CSGetKitDataRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSGetKitDataResDefaultTypeInternal _CSGetKitDataRes_default_instance_;
constexpr SServerOnlineNotify_Server::SServerOnlineNotify_Server(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0)
  , state_(false){}
struct SServerOnlineNotify_ServerDefaultTypeInternal {
  constexpr SServerOnlineNotify_ServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SServerOnlineNotify_ServerDefaultTypeInternal() {}
  union {
    SServerOnlineNotify_Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SServerOnlineNotify_ServerDefaultTypeInternal _SServerOnlineNotify_Server_default_instance_;
constexpr SServerOnlineNotify::SServerOnlineNotify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : allservers_(){}
struct SServerOnlineNotifyDefaultTypeInternal {
  constexpr SServerOnlineNotifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SServerOnlineNotifyDefaultTypeInternal() {}
  union {
    SServerOnlineNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SServerOnlineNotifyDefaultTypeInternal _SServerOnlineNotify_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fArkHelperProto_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fArkHelperProto_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fArkHelperProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fArkHelperProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginReq, steamid_),
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginReq, password_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSPlayerLoginRes, state_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSUpdatePlayerDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSUpdatePlayerDataRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSUpdatePlayerDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSUpdatePlayerDataRes, vip_),
  PROTOBUF_FIELD_OFFSET(::CSUpdatePlayerDataRes, points_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetShopDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetShopDataRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSGetShopDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetShopDataRes, shopdata_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSGetKitDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetKitDataRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSGetKitDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSGetKitDataRes, kitdata_),
  0,
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify_Server, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify_Server, name_),
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify_Server, port_),
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify_Server, state_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SServerOnlineNotify, allservers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CSPlayerLoginReq)},
  { 9, 15, sizeof(::CSPlayerLoginRes)},
  { 16, -1, sizeof(::CSUpdatePlayerDataReq)},
  { 21, 28, sizeof(::CSUpdatePlayerDataRes)},
  { 30, -1, sizeof(::CSGetShopDataReq)},
  { 35, 41, sizeof(::CSGetShopDataRes)},
  { 42, -1, sizeof(::CSGetKitDataReq)},
  { 47, 53, sizeof(::CSGetKitDataRes)},
  { 54, 62, sizeof(::SServerOnlineNotify_Server)},
  { 65, -1, sizeof(::SServerOnlineNotify)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSPlayerLoginReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSPlayerLoginRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSUpdatePlayerDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSUpdatePlayerDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetShopDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetShopDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetKitDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSGetKitDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SServerOnlineNotify_Server_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SServerOnlineNotify_default_instance_),
};

const char descriptor_table_protodef_proto_2fArkHelperProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032proto/ArkHelperProto.proto\"X\n\020CSPlayer"
  "LoginReq\022\024\n\007SteamID\030\001 \001(\tH\000\210\001\001\022\025\n\010PassWo"
  "rd\030\002 \001(\tH\001\210\001\001B\n\n\010_SteamIDB\013\n\t_PassWord\"\234"
  "\001\n\020CSPlayerLoginRes\0220\n\005State\030\001 \001(\0162\034.CSP"
  "layerLoginRes.LoginStateH\000\210\001\001\"L\n\nLoginSt"
  "ate\022\013\n\007SUCCESS\020\000\022\020\n\014ERR_PASSWORD\020\001\022\016\n\nNO"
  "_STEAMID\020\002\022\017\n\013NO_PASSWORD\020\003B\010\n\006_State\"\027\n"
  "\025CSUpdatePlayerDataReq\"Q\n\025CSUpdatePlayer"
  "DataRes\022\020\n\003Vip\030\001 \001(\005H\000\210\001\001\022\023\n\006Points\030\002 \001("
  "\005H\001\210\001\001B\006\n\004_VipB\t\n\007_Points\"\022\n\020CSGetShopDa"
  "taReq\"6\n\020CSGetShopDataRes\022\025\n\010ShopData\030\001 "
  "\001(\tH\000\210\001\001B\013\n\t_ShopData\"\021\n\017CSGetKitDataReq"
  "\"3\n\017CSGetKitDataRes\022\024\n\007KitData\030\001 \001(\tH\000\210\001"
  "\001B\n\n\010_KitData\"\246\001\n\023SServerOnlineNotify\022/\n"
  "\nAllServers\030\001 \003(\0132\033.SServerOnlineNotify."
  "Server\032^\n\006Server\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\021\n\004p"
  "ort\030\002 \001(\005H\001\210\001\001\022\022\n\005state\030\003 \001(\010H\002\210\001\001B\007\n\005_n"
  "ameB\007\n\005_portB\010\n\006_stateb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fArkHelperProto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fArkHelperProto_2eproto = {
  false, false, 710, descriptor_table_protodef_proto_2fArkHelperProto_2eproto, "proto/ArkHelperProto.proto", 
  &descriptor_table_proto_2fArkHelperProto_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_proto_2fArkHelperProto_2eproto::offsets,
  file_level_metadata_proto_2fArkHelperProto_2eproto, file_level_enum_descriptors_proto_2fArkHelperProto_2eproto, file_level_service_descriptors_proto_2fArkHelperProto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fArkHelperProto_2eproto_getter() {
  return &descriptor_table_proto_2fArkHelperProto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fArkHelperProto_2eproto(&descriptor_table_proto_2fArkHelperProto_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSPlayerLoginRes_LoginState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fArkHelperProto_2eproto);
  return file_level_enum_descriptors_proto_2fArkHelperProto_2eproto[0];
}
bool CSPlayerLoginRes_LoginState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CSPlayerLoginRes_LoginState CSPlayerLoginRes::SUCCESS;
constexpr CSPlayerLoginRes_LoginState CSPlayerLoginRes::ERR_PASSWORD;
constexpr CSPlayerLoginRes_LoginState CSPlayerLoginRes::NO_STEAMID;
constexpr CSPlayerLoginRes_LoginState CSPlayerLoginRes::NO_PASSWORD;
constexpr CSPlayerLoginRes_LoginState CSPlayerLoginRes::LoginState_MIN;
constexpr CSPlayerLoginRes_LoginState CSPlayerLoginRes::LoginState_MAX;
constexpr int CSPlayerLoginRes::LoginState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CSPlayerLoginReq::_Internal {
 public:
  using HasBits = decltype(std::declval<CSPlayerLoginReq>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSPlayerLoginReq::CSPlayerLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSPlayerLoginReq)
}
CSPlayerLoginReq::CSPlayerLoginReq(const CSPlayerLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_steamid()) {
    steamid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamid(), 
      GetArenaForAllocation());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSPlayerLoginReq)
}

inline void CSPlayerLoginReq::SharedCtor() {
steamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSPlayerLoginReq::~CSPlayerLoginReq() {
  // @@protoc_insertion_point(destructor:CSPlayerLoginReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSPlayerLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  steamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSPlayerLoginReq::ArenaDtor(void* object) {
  CSPlayerLoginReq* _this = reinterpret_cast< CSPlayerLoginReq* >(object);
  (void)_this;
}
void CSPlayerLoginReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPlayerLoginReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSPlayerLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSPlayerLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPlayerLoginReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string SteamID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_steamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSPlayerLoginReq.SteamID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string PassWord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSPlayerLoginReq.PassWord"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPlayerLoginReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSPlayerLoginReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string SteamID = 1;
  if (_internal_has_steamid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_steamid().data(), static_cast<int>(this->_internal_steamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSPlayerLoginReq.SteamID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_steamid(), target);
  }

  // optional string PassWord = 2;
  if (_internal_has_password()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSPlayerLoginReq.PassWord");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSPlayerLoginReq)
  return target;
}

size_t CSPlayerLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSPlayerLoginReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string SteamID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_steamid());
    }

    // optional string PassWord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSPlayerLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSPlayerLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSPlayerLoginReq::GetClassData() const { return &_class_data_; }

void CSPlayerLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSPlayerLoginReq *>(to)->MergeFrom(
      static_cast<const CSPlayerLoginReq &>(from));
}


void CSPlayerLoginReq::MergeFrom(const CSPlayerLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSPlayerLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_steamid(from._internal_steamid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_password(from._internal_password());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSPlayerLoginReq::CopyFrom(const CSPlayerLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSPlayerLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerLoginReq::IsInitialized() const {
  return true;
}

void CSPlayerLoginReq::InternalSwap(CSPlayerLoginReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &steamid_, GetArenaForAllocation(),
      &other->steamid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &password_, GetArenaForAllocation(),
      &other->password_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPlayerLoginReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[0]);
}

// ===================================================================

class CSPlayerLoginRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CSPlayerLoginRes>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSPlayerLoginRes::CSPlayerLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSPlayerLoginRes)
}
CSPlayerLoginRes::CSPlayerLoginRes(const CSPlayerLoginRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:CSPlayerLoginRes)
}

inline void CSPlayerLoginRes::SharedCtor() {
state_ = 0;
}

CSPlayerLoginRes::~CSPlayerLoginRes() {
  // @@protoc_insertion_point(destructor:CSPlayerLoginRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSPlayerLoginRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSPlayerLoginRes::ArenaDtor(void* object) {
  CSPlayerLoginRes* _this = reinterpret_cast< CSPlayerLoginRes* >(object);
  (void)_this;
}
void CSPlayerLoginRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSPlayerLoginRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSPlayerLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CSPlayerLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSPlayerLoginRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CSPlayerLoginRes.LoginState State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::CSPlayerLoginRes_LoginState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSPlayerLoginRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSPlayerLoginRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .CSPlayerLoginRes.LoginState State = 1;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSPlayerLoginRes)
  return target;
}

size_t CSPlayerLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSPlayerLoginRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CSPlayerLoginRes.LoginState State = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSPlayerLoginRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSPlayerLoginRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSPlayerLoginRes::GetClassData() const { return &_class_data_; }

void CSPlayerLoginRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSPlayerLoginRes *>(to)->MergeFrom(
      static_cast<const CSPlayerLoginRes &>(from));
}


void CSPlayerLoginRes::MergeFrom(const CSPlayerLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSPlayerLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_state()) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSPlayerLoginRes::CopyFrom(const CSPlayerLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSPlayerLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerLoginRes::IsInitialized() const {
  return true;
}

void CSPlayerLoginRes::InternalSwap(CSPlayerLoginRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSPlayerLoginRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[1]);
}

// ===================================================================

class CSUpdatePlayerDataReq::_Internal {
 public:
};

CSUpdatePlayerDataReq::CSUpdatePlayerDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSUpdatePlayerDataReq)
}
CSUpdatePlayerDataReq::CSUpdatePlayerDataReq(const CSUpdatePlayerDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSUpdatePlayerDataReq)
}

inline void CSUpdatePlayerDataReq::SharedCtor() {
}

CSUpdatePlayerDataReq::~CSUpdatePlayerDataReq() {
  // @@protoc_insertion_point(destructor:CSUpdatePlayerDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSUpdatePlayerDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSUpdatePlayerDataReq::ArenaDtor(void* object) {
  CSUpdatePlayerDataReq* _this = reinterpret_cast< CSUpdatePlayerDataReq* >(object);
  (void)_this;
}
void CSUpdatePlayerDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUpdatePlayerDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSUpdatePlayerDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSUpdatePlayerDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUpdatePlayerDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUpdatePlayerDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSUpdatePlayerDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSUpdatePlayerDataReq)
  return target;
}

size_t CSUpdatePlayerDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSUpdatePlayerDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSUpdatePlayerDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSUpdatePlayerDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSUpdatePlayerDataReq::GetClassData() const { return &_class_data_; }

void CSUpdatePlayerDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSUpdatePlayerDataReq *>(to)->MergeFrom(
      static_cast<const CSUpdatePlayerDataReq &>(from));
}


void CSUpdatePlayerDataReq::MergeFrom(const CSUpdatePlayerDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSUpdatePlayerDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSUpdatePlayerDataReq::CopyFrom(const CSUpdatePlayerDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSUpdatePlayerDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpdatePlayerDataReq::IsInitialized() const {
  return true;
}

void CSUpdatePlayerDataReq::InternalSwap(CSUpdatePlayerDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUpdatePlayerDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[2]);
}

// ===================================================================

class CSUpdatePlayerDataRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CSUpdatePlayerDataRes>()._has_bits_);
  static void set_has_vip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSUpdatePlayerDataRes::CSUpdatePlayerDataRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSUpdatePlayerDataRes)
}
CSUpdatePlayerDataRes::CSUpdatePlayerDataRes(const CSUpdatePlayerDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vip_, &from.vip_,
    static_cast<size_t>(reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&vip_)) + sizeof(points_));
  // @@protoc_insertion_point(copy_constructor:CSUpdatePlayerDataRes)
}

inline void CSUpdatePlayerDataRes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&vip_)) + sizeof(points_));
}

CSUpdatePlayerDataRes::~CSUpdatePlayerDataRes() {
  // @@protoc_insertion_point(destructor:CSUpdatePlayerDataRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSUpdatePlayerDataRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSUpdatePlayerDataRes::ArenaDtor(void* object) {
  CSUpdatePlayerDataRes* _this = reinterpret_cast< CSUpdatePlayerDataRes* >(object);
  (void)_this;
}
void CSUpdatePlayerDataRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSUpdatePlayerDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSUpdatePlayerDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CSUpdatePlayerDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&vip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_) -
        reinterpret_cast<char*>(&vip_)) + sizeof(points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSUpdatePlayerDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 Vip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vip(&has_bits);
          vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 Points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSUpdatePlayerDataRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSUpdatePlayerDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 Vip = 1;
  if (_internal_has_vip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vip(), target);
  }

  // optional int32 Points = 2;
  if (_internal_has_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSUpdatePlayerDataRes)
  return target;
}

size_t CSUpdatePlayerDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSUpdatePlayerDataRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 Vip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_vip());
    }

    // optional int32 Points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_points());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSUpdatePlayerDataRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSUpdatePlayerDataRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSUpdatePlayerDataRes::GetClassData() const { return &_class_data_; }

void CSUpdatePlayerDataRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSUpdatePlayerDataRes *>(to)->MergeFrom(
      static_cast<const CSUpdatePlayerDataRes &>(from));
}


void CSUpdatePlayerDataRes::MergeFrom(const CSUpdatePlayerDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSUpdatePlayerDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      vip_ = from.vip_;
    }
    if (cached_has_bits & 0x00000002u) {
      points_ = from.points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSUpdatePlayerDataRes::CopyFrom(const CSUpdatePlayerDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSUpdatePlayerDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSUpdatePlayerDataRes::IsInitialized() const {
  return true;
}

void CSUpdatePlayerDataRes::InternalSwap(CSUpdatePlayerDataRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSUpdatePlayerDataRes, points_)
      + sizeof(CSUpdatePlayerDataRes::points_)
      - PROTOBUF_FIELD_OFFSET(CSUpdatePlayerDataRes, vip_)>(
          reinterpret_cast<char*>(&vip_),
          reinterpret_cast<char*>(&other->vip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSUpdatePlayerDataRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[3]);
}

// ===================================================================

class CSGetShopDataReq::_Internal {
 public:
};

CSGetShopDataReq::CSGetShopDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSGetShopDataReq)
}
CSGetShopDataReq::CSGetShopDataReq(const CSGetShopDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetShopDataReq)
}

inline void CSGetShopDataReq::SharedCtor() {
}

CSGetShopDataReq::~CSGetShopDataReq() {
  // @@protoc_insertion_point(destructor:CSGetShopDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSGetShopDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSGetShopDataReq::ArenaDtor(void* object) {
  CSGetShopDataReq* _this = reinterpret_cast< CSGetShopDataReq* >(object);
  (void)_this;
}
void CSGetShopDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetShopDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSGetShopDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetShopDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetShopDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetShopDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetShopDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetShopDataReq)
  return target;
}

size_t CSGetShopDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetShopDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSGetShopDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSGetShopDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSGetShopDataReq::GetClassData() const { return &_class_data_; }

void CSGetShopDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSGetShopDataReq *>(to)->MergeFrom(
      static_cast<const CSGetShopDataReq &>(from));
}


void CSGetShopDataReq::MergeFrom(const CSGetShopDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetShopDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSGetShopDataReq::CopyFrom(const CSGetShopDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetShopDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetShopDataReq::IsInitialized() const {
  return true;
}

void CSGetShopDataReq::InternalSwap(CSGetShopDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetShopDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[4]);
}

// ===================================================================

class CSGetShopDataRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CSGetShopDataRes>()._has_bits_);
  static void set_has_shopdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSGetShopDataRes::CSGetShopDataRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSGetShopDataRes)
}
CSGetShopDataRes::CSGetShopDataRes(const CSGetShopDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shopdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shopdata()) {
    shopdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shopdata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSGetShopDataRes)
}

inline void CSGetShopDataRes::SharedCtor() {
shopdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSGetShopDataRes::~CSGetShopDataRes() {
  // @@protoc_insertion_point(destructor:CSGetShopDataRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSGetShopDataRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shopdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSGetShopDataRes::ArenaDtor(void* object) {
  CSGetShopDataRes* _this = reinterpret_cast< CSGetShopDataRes* >(object);
  (void)_this;
}
void CSGetShopDataRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetShopDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSGetShopDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetShopDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    shopdata_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetShopDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string ShopData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_shopdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSGetShopDataRes.ShopData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetShopDataRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetShopDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string ShopData = 1;
  if (_internal_has_shopdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shopdata().data(), static_cast<int>(this->_internal_shopdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSGetShopDataRes.ShopData");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shopdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetShopDataRes)
  return target;
}

size_t CSGetShopDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetShopDataRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string ShopData = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shopdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSGetShopDataRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSGetShopDataRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSGetShopDataRes::GetClassData() const { return &_class_data_; }

void CSGetShopDataRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSGetShopDataRes *>(to)->MergeFrom(
      static_cast<const CSGetShopDataRes &>(from));
}


void CSGetShopDataRes::MergeFrom(const CSGetShopDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetShopDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shopdata()) {
    _internal_set_shopdata(from._internal_shopdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSGetShopDataRes::CopyFrom(const CSGetShopDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetShopDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetShopDataRes::IsInitialized() const {
  return true;
}

void CSGetShopDataRes::InternalSwap(CSGetShopDataRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &shopdata_, GetArenaForAllocation(),
      &other->shopdata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetShopDataRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[5]);
}

// ===================================================================

class CSGetKitDataReq::_Internal {
 public:
};

CSGetKitDataReq::CSGetKitDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSGetKitDataReq)
}
CSGetKitDataReq::CSGetKitDataReq(const CSGetKitDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSGetKitDataReq)
}

inline void CSGetKitDataReq::SharedCtor() {
}

CSGetKitDataReq::~CSGetKitDataReq() {
  // @@protoc_insertion_point(destructor:CSGetKitDataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSGetKitDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSGetKitDataReq::ArenaDtor(void* object) {
  CSGetKitDataReq* _this = reinterpret_cast< CSGetKitDataReq* >(object);
  (void)_this;
}
void CSGetKitDataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetKitDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSGetKitDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetKitDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetKitDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetKitDataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetKitDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetKitDataReq)
  return target;
}

size_t CSGetKitDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetKitDataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSGetKitDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSGetKitDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSGetKitDataReq::GetClassData() const { return &_class_data_; }

void CSGetKitDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSGetKitDataReq *>(to)->MergeFrom(
      static_cast<const CSGetKitDataReq &>(from));
}


void CSGetKitDataReq::MergeFrom(const CSGetKitDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetKitDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSGetKitDataReq::CopyFrom(const CSGetKitDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetKitDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetKitDataReq::IsInitialized() const {
  return true;
}

void CSGetKitDataReq::InternalSwap(CSGetKitDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetKitDataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[6]);
}

// ===================================================================

class CSGetKitDataRes::_Internal {
 public:
  using HasBits = decltype(std::declval<CSGetKitDataRes>()._has_bits_);
  static void set_has_kitdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSGetKitDataRes::CSGetKitDataRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CSGetKitDataRes)
}
CSGetKitDataRes::CSGetKitDataRes(const CSGetKitDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kitdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_kitdata()) {
    kitdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kitdata(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CSGetKitDataRes)
}

inline void CSGetKitDataRes::SharedCtor() {
kitdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSGetKitDataRes::~CSGetKitDataRes() {
  // @@protoc_insertion_point(destructor:CSGetKitDataRes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CSGetKitDataRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kitdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSGetKitDataRes::ArenaDtor(void* object) {
  CSGetKitDataRes* _this = reinterpret_cast< CSGetKitDataRes* >(object);
  (void)_this;
}
void CSGetKitDataRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSGetKitDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSGetKitDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGetKitDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    kitdata_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSGetKitDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string KitData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_kitdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSGetKitDataRes.KitData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSGetKitDataRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSGetKitDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string KitData = 1;
  if (_internal_has_kitdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kitdata().data(), static_cast<int>(this->_internal_kitdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CSGetKitDataRes.KitData");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_kitdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGetKitDataRes)
  return target;
}

size_t CSGetKitDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSGetKitDataRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string KitData = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kitdata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSGetKitDataRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CSGetKitDataRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSGetKitDataRes::GetClassData() const { return &_class_data_; }

void CSGetKitDataRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CSGetKitDataRes *>(to)->MergeFrom(
      static_cast<const CSGetKitDataRes &>(from));
}


void CSGetKitDataRes::MergeFrom(const CSGetKitDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSGetKitDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kitdata()) {
    _internal_set_kitdata(from._internal_kitdata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSGetKitDataRes::CopyFrom(const CSGetKitDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGetKitDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetKitDataRes::IsInitialized() const {
  return true;
}

void CSGetKitDataRes::InternalSwap(CSGetKitDataRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kitdata_, GetArenaForAllocation(),
      &other->kitdata_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSGetKitDataRes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[7]);
}

// ===================================================================

class SServerOnlineNotify_Server::_Internal {
 public:
  using HasBits = decltype(std::declval<SServerOnlineNotify_Server>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SServerOnlineNotify_Server::SServerOnlineNotify_Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SServerOnlineNotify.Server)
}
SServerOnlineNotify_Server::SServerOnlineNotify_Server(const SServerOnlineNotify_Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&port_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:SServerOnlineNotify.Server)
}

inline void SServerOnlineNotify_Server::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&port_)) + sizeof(state_));
}

SServerOnlineNotify_Server::~SServerOnlineNotify_Server() {
  // @@protoc_insertion_point(destructor:SServerOnlineNotify.Server)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SServerOnlineNotify_Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SServerOnlineNotify_Server::ArenaDtor(void* object) {
  SServerOnlineNotify_Server* _this = reinterpret_cast< SServerOnlineNotify_Server* >(object);
  (void)_this;
}
void SServerOnlineNotify_Server::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SServerOnlineNotify_Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SServerOnlineNotify_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:SServerOnlineNotify.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&port_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SServerOnlineNotify_Server::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SServerOnlineNotify.Server.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SServerOnlineNotify_Server::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SServerOnlineNotify.Server)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SServerOnlineNotify.Server.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 port = 2;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  // optional bool state = 3;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SServerOnlineNotify.Server)
  return target;
}

size_t SServerOnlineNotify_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SServerOnlineNotify.Server)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

    // optional bool state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SServerOnlineNotify_Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SServerOnlineNotify_Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SServerOnlineNotify_Server::GetClassData() const { return &_class_data_; }

void SServerOnlineNotify_Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SServerOnlineNotify_Server *>(to)->MergeFrom(
      static_cast<const SServerOnlineNotify_Server &>(from));
}


void SServerOnlineNotify_Server::MergeFrom(const SServerOnlineNotify_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SServerOnlineNotify.Server)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SServerOnlineNotify_Server::CopyFrom(const SServerOnlineNotify_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SServerOnlineNotify.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SServerOnlineNotify_Server::IsInitialized() const {
  return true;
}

void SServerOnlineNotify_Server::InternalSwap(SServerOnlineNotify_Server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SServerOnlineNotify_Server, state_)
      + sizeof(SServerOnlineNotify_Server::state_)
      - PROTOBUF_FIELD_OFFSET(SServerOnlineNotify_Server, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SServerOnlineNotify_Server::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[8]);
}

// ===================================================================

class SServerOnlineNotify::_Internal {
 public:
};

SServerOnlineNotify::SServerOnlineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  allservers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SServerOnlineNotify)
}
SServerOnlineNotify::SServerOnlineNotify(const SServerOnlineNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allservers_(from.allservers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SServerOnlineNotify)
}

inline void SServerOnlineNotify::SharedCtor() {
}

SServerOnlineNotify::~SServerOnlineNotify() {
  // @@protoc_insertion_point(destructor:SServerOnlineNotify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SServerOnlineNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SServerOnlineNotify::ArenaDtor(void* object) {
  SServerOnlineNotify* _this = reinterpret_cast< SServerOnlineNotify* >(object);
  (void)_this;
}
void SServerOnlineNotify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SServerOnlineNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SServerOnlineNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:SServerOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allservers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SServerOnlineNotify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SServerOnlineNotify.Server AllServers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allservers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SServerOnlineNotify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SServerOnlineNotify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SServerOnlineNotify.Server AllServers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allservers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_allservers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SServerOnlineNotify)
  return target;
}

size_t SServerOnlineNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SServerOnlineNotify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SServerOnlineNotify.Server AllServers = 1;
  total_size += 1UL * this->_internal_allservers_size();
  for (const auto& msg : this->allservers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SServerOnlineNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SServerOnlineNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SServerOnlineNotify::GetClassData() const { return &_class_data_; }

void SServerOnlineNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SServerOnlineNotify *>(to)->MergeFrom(
      static_cast<const SServerOnlineNotify &>(from));
}


void SServerOnlineNotify::MergeFrom(const SServerOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SServerOnlineNotify)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allservers_.MergeFrom(from.allservers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SServerOnlineNotify::CopyFrom(const SServerOnlineNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SServerOnlineNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SServerOnlineNotify::IsInitialized() const {
  return true;
}

void SServerOnlineNotify::InternalSwap(SServerOnlineNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allservers_.InternalSwap(&other->allservers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SServerOnlineNotify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fArkHelperProto_2eproto_getter, &descriptor_table_proto_2fArkHelperProto_2eproto_once,
      file_level_metadata_proto_2fArkHelperProto_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSPlayerLoginReq* Arena::CreateMaybeMessage< ::CSPlayerLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSPlayerLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSPlayerLoginRes* Arena::CreateMaybeMessage< ::CSPlayerLoginRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSPlayerLoginRes >(arena);
}
template<> PROTOBUF_NOINLINE ::CSUpdatePlayerDataReq* Arena::CreateMaybeMessage< ::CSUpdatePlayerDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSUpdatePlayerDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSUpdatePlayerDataRes* Arena::CreateMaybeMessage< ::CSUpdatePlayerDataRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSUpdatePlayerDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetShopDataReq* Arena::CreateMaybeMessage< ::CSGetShopDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetShopDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetShopDataRes* Arena::CreateMaybeMessage< ::CSGetShopDataRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetShopDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetKitDataReq* Arena::CreateMaybeMessage< ::CSGetKitDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetKitDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::CSGetKitDataRes* Arena::CreateMaybeMessage< ::CSGetKitDataRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSGetKitDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::SServerOnlineNotify_Server* Arena::CreateMaybeMessage< ::SServerOnlineNotify_Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SServerOnlineNotify_Server >(arena);
}
template<> PROTOBUF_NOINLINE ::SServerOnlineNotify* Arena::CreateMaybeMessage< ::SServerOnlineNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SServerOnlineNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
